// Mocks generated by Mockito 5.4.5 from annotations
// in inc_project/test/data/repositories/article_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:fpdart/fpdart.dart' as _i8;
import 'package:inc_project/core/error/failures.dart' as _i9;
import 'package:inc_project/core/network/network_checker.dart' as _i7;
import 'package:inc_project/features/articles/data/datasources/article_local_data_source.dart'
    as _i5;
import 'package:inc_project/features/articles/data/datasources/article_remote_data_source.dart'
    as _i2;
import 'package:inc_project/features/articles/data/models/article_model.dart'
    as _i4;
import 'package:inc_project/features/articles/domain/entities/article.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ArticleRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticleRemoteDataSource extends _i1.Mock
    implements _i2.ArticleRemoteDataSource {
  MockArticleRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.ArticleModel>> getArticles({
    required int? page,
    required int? pageSize,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getArticles, [], {
              #page: page,
              #pageSize: pageSize,
            }),
            returnValue: _i3.Future<List<_i4.ArticleModel>>.value(
              <_i4.ArticleModel>[],
            ),
          )
          as _i3.Future<List<_i4.ArticleModel>>);
}

/// A class which mocks [ArticleLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticleLocalDataSource extends _i1.Mock
    implements _i5.ArticleLocalDataSource {
  MockArticleLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<String>> getFavoriteIds() =>
      (super.noSuchMethod(
            Invocation.method(#getFavoriteIds, []),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<void> saveFavoriteIds(List<String>? favoriteIds) =>
      (super.noSuchMethod(
            Invocation.method(#saveFavoriteIds, [favoriteIds]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> toggleFavorite(String? articleId) =>
      (super.noSuchMethod(
            Invocation.method(#toggleFavorite, [articleId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> cacheArticles(List<_i6.Article>? articles, int? page) =>
      (super.noSuchMethod(
            Invocation.method(#cacheArticles, [articles, page]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i6.Article>> getCachedArticles(int? page) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedArticles, [page]),
            returnValue: _i3.Future<List<_i6.Article>>.value(<_i6.Article>[]),
          )
          as _i3.Future<List<_i6.Article>>);

  @override
  _i3.Future<void> clearCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearCache, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> isCached(int? page) =>
      (super.noSuchMethod(
            Invocation.method(#isCached, [page]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> updateCachedArticle(_i6.Article? article) =>
      (super.noSuchMethod(
            Invocation.method(#updateCachedArticle, [article]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get checkIsConnected =>
      (super.noSuchMethod(
            Invocation.getter(#checkIsConnected),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  set setIsConnected(bool? val) => super.noSuchMethod(
    Invocation.setter(#setIsConnected, val),
    returnValueForMissingStub: null,
  );

  @override
  bool get getIsConnected =>
      (super.noSuchMethod(
            Invocation.getter(#getIsConnected),
            returnValue: false,
          )
          as bool);

  @override
  _i3.Future<_i8.Either<_i9.Failure, T>> check<T>({
    required _i7.EitherNetwork<T>? connected,
    required _i7.EitherNetwork<T>? notConnected,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#check, [], {
              #connected: connected,
              #notConnected: notConnected,
            }),
            returnValue: _i3.Future<_i8.Either<_i9.Failure, T>>.value(
              _i10.dummyValue<_i8.Either<_i9.Failure, T>>(
                this,
                Invocation.method(#check, [], {
                  #connected: connected,
                  #notConnected: notConnected,
                }),
              ),
            ),
          )
          as _i3.Future<_i8.Either<_i9.Failure, T>>);
}
